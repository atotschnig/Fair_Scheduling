# -*- coding: utf-8 -*-
"""Constant_Time.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I6SmvAVGSlnYFWlGZKDKvgkV6GtW_aP6
"""

import numpy as np
import matplotlib.pyplot as plt
import math

def generate_jobs (k, n_0):
  job_id = list(range(0, k, 1))
  job_time = []
  for i in job_id:
    job_time.append(pow(2, i))
  job_num = []
  for i in job_time:
    job_num.append(n_0/i)
  return job_id, job_time, job_num

def social_cost(k, n_0):
  job_id, job_time, job_num = generate_jobs(k, n_0)
  sc = []
  constant_time = n_0*job_time[0]
  for i in range(1, k+1):    #the last section has i groups, where all i groups are executed randomly
    cost_first = []
    cost_last = []
    C_last = i*constant_time #The processing time for the last i groups
    for j in range(0, k-i): #the first section has k-i groups where each group are executed sequentially
      cost_j = (job_time[j] + constant_time) * job_num[j]/2
      cost_j = cost_j + job_num[j]*constant_time*j
      cost_first.append(cost_j)
    for j in range(k-i, k):
      cost_j = (C_last + job_time[j])*job_num[j]/2
      cost_last.append(cost_j)
    C_last = sum(job_num[k-i:])*constant_time*(k-i) + sum(cost_last)
    #print(C_last)
    sc.append(C_last + sum(cost_first))
  return sc

def fairness(k, n_0):
  job_id, job_time, job_num = generate_jobs(k, n_0)
  fair = []
  constant_time = n_0*job_time[0]
  for i in range(1, k+1):
    fair_temp = []
    for j in range(0, k-i):
      cost_smith = (constant_time + job_time[j])/2 + constant_time*j
      cost_random = (constant_time*k + job_time[j])/2
      fair_temp.append(cost_smith/cost_random)
    for j in range(k-i, k):
      cost_smith = (constant_time*i + job_time[j])/2 + constant_time*(k-i)
      cost_random = (constant_time*k+job_time[j])/2
      fair_temp.append(cost_smith/cost_random)
    fair.append(max(fair_temp))
  return fair

fair = fairness(100, 2**100)
sc = social_cost(100, 2**100)
sc = [s/min(sc) for s in sc]
plt.plot(fair, sc, '.')

fair = fairness(10, 2**10)
sc = social_cost(10, 2**10)
sc = [s/min(sc) for s in sc]
plt.plot(fair, sc, '.')